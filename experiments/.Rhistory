"n_y" = n_y)
return(size)
}
initializeParameters <- function(X, list_layer_size){
m <- dim(data.matrix(X))[2]
n_x <- list_layer_size$n_x
n_h <- list_layer_size$n_h
n_y <- list_layer_size$n_y
# TODO: tweak the initialization strategy
# W1 <- matrix(rnorm(n_h * n_x), nrow = n_h, ncol = n_x, byrow = TRUE)
W1 <- matrix(runif(n_h * n_x, min=-2, max=2), nrow = n_h, ncol = n_x, byrow = TRUE)
b1 <- matrix(rnorm(n_h), nrow = n_h)
# b1 <- matrix(rep(0, n_h), nrow = n_h)
W2 <- matrix(rnorm(n_y * n_h), nrow = n_y, ncol = n_h, byrow = TRUE)
W2 <- matrix(runif(n_y * n_h, min=-2, max=2), nrow = n_y, ncol = n_h, byrow = TRUE)
b2 <- matrix(rnorm(n_y), nrow = n_y)
params <- list("W1" = W1,
"b1" = b1,
"W2" = W2,
"b2" = b2)
return (params)
}
sigmoid <- function(x){
return(1 / (1 + exp(-x)))
}
forwardPropagation <- function(X, params, list_layer_size){
m <- dim(X)[2]
n_h <- list_layer_size$n_h
n_y <- list_layer_size$n_y
W1 <- params$W1
b1 <- params$b1
W2 <- params$W2
b2 <- params$b2
b1_new <- matrix(rep(b1, m), nrow = n_h)
b2_new <- matrix(rep(b2, m), nrow = n_y)
Z1 <- W1 %*% X + b1_new
A1 <- sigmoid(Z1)
Z2 <- W2 %*% A1 + b2_new
A2 <- sigmoid(Z2)
cache <- list("Z1" = Z1,
"A1" = A1,
"Z2" = Z2,
"A2" = A2)
return (cache)
}
softmaxLayer <- function(fwd_prop) {
exp_A2 <- exp(fwd_prop$A2)
sum_exp_A2 <- colSums(exp_A2)
softmax_A2 <- exp_A2 / sum_exp_A2
return (softmax_A2)
}
predictSoftmax <- function(softmax_pass) {
pred <- 1 * sapply(1:ncol(softmax_pass), function(x) {
softmax_pass[,x] >= max(softmax_pass[,x])
})
return (pred)
}
random_sample <- function(X_data, y_data, model) {
init_params <- initializeParameters(X_data, model)
fwd_prop <- forwardPropagation(X_data, init_params, model)
softmax_pass <- softmaxLayer(fwd_prop)
y_pred <- predictSoftmax(softmax_pass)
accuracy <- sum(y_pred * y_data) / ncol(y_data)
return(accuracy)
}
nn_model_2 <- getLayerSize(X_data, y_data, hidden_neurons = 20)
samples_2 <- sapply(1:no_samples, function(x) random_sample(X_data, y_data, nn_model_2))
hist(samples_2, breaks=seq(0,1, 0.05))
hist(samples_rand_cl, breaks=seq(0,1, 0.05))
set.seed(1234)
X_sample_len <- 10
X_num_samples <- 100
y_num_classes <- 4
# Normal distribution and quartiles
X_data <- matrix(rnorm(X_sample_len * X_num_samples), ncol=X_num_samples)
q1 <- 0 - .675 * 1
q2 <- 0
q3 <- 0 + .675 * 1
y_data <- matrix(rep(0, X_num_samples * y_num_classes), ncol=X_num_samples)
y_data[1,] <- X_data[1,] < q1
y_data[2,] <- X_data[1,] >= q1 & X_data[1,] < q2
y_data[3,] <- X_data[1,] >= q2 & X_data[1,] < q3
y_data[4,] <- X_data[1,] > q3
X <- X_data
m <- dim(data.matrix(X))[2]
n_x <- list_layer_size$n_x
n_h <- list_layer_size$n_h
n_y <- list_layer_size$n_y
# TODO: tweak the initialization strategy
W1 <- matrix(rnorm(n_h * n_x), nrow = n_h, ncol = n_x, byrow = TRUE)
# W1 <- matrix(runif(n_h * n_x, min=-2, max=2), nrow = n_h, ncol = n_x, byrow = TRUE)
b1 <- matrix(rnorm(n_h), nrow = n_h)
# b1 <- matrix(rep(0, n_h), nrow = n_h)
W2 <- matrix(rnorm(n_y * n_h), nrow = n_y, ncol = n_h, byrow = TRUE)
# W2 <- matrix(runif(n_y * n_h, min=-2, max=2), nrow = n_y, ncol = n_h, byrow = TRUE)
b2 <- matrix(rnorm(n_y), nrow = n_y)
n_x <- dim(X)[1]
n_h <- hidden_neurons
n_y <- dim(y)[1]
n_h <- 1
n_y <- 4
# TODO: tweak the initialization strategy
W1 <- matrix(rnorm(n_h * n_x), nrow = n_h, ncol = n_x, byrow = TRUE)
# W1 <- matrix(runif(n_h * n_x, min=-2, max=2), nrow = n_h, ncol = n_x, byrow = TRUE)
b1 <- matrix(rnorm(n_h), nrow = n_h)
# b1 <- matrix(rep(0, n_h), nrow = n_h)
W2 <- matrix(rnorm(n_y * n_h), nrow = n_y, ncol = n_h, byrow = TRUE)
# W2 <- matrix(runif(n_y * n_h, min=-2, max=2), nrow = n_y, ncol = n_h, byrow = TRUE)
b2 <- matrix(rnorm(n_y), nrow = n_y)
params <- list("W1" = W1,
"b1" = b1,
"W2" = W2,
"b2" = b2)
W1
W2
b1_new <- matrix(rep(b1, m), nrow = n_h)
b2_new <- matrix(rep(b2, m), nrow = n_y)
b1_new
Z1 <- W1 %*% X + b1_new
Z1
A1 <- sigmoid(Z1)
sigmoid <- function(x){
return(1 / (1 + exp(-x)))
}
A1 <- sigmoid(Z1)
A1
setwd("~/git/nasbench/experiments/")
library(jsonlite)
require(ggplot2)
raw_txt <- readLines("summary.GA.rand.36.log")
i <- 1
raw <- fromJSON(raw_txt[i])
raw_txt[i]
substr(raw_txt[i], 3,)
substr(raw_txt[i], 3,10)
strsplit(raw_txt[i], "INFO")
strsplit(raw_txt[i], "INFO")[[1]]
strsplit(raw_txt[i], "INFO")[[1]][2]
raw <- fromJSON(strsplit(raw_txt[i], "INFO")[[1]][2])
raw
results <- data.frame()
rbind(results, data.frame(epochs=raw$epochs))
rbind(results, data.frame(epochs=raw$epochs, test_accuracy=raw$test_accuracy))
for(i in 1:100) {
raw <- fromJSON(strsplit(raw_txt[i], "INFO")[[1]][2])
results <- rbind(results, data.frame(epochs=raw$epochs, test_accuracy=raw$test_accuracy))
}
results
filename <- "summary.GA.rand.36.log"
raw_txt <- readLines(filename)
alg <- strsplit(filename, ".")
alg <- strsplit(filename, ".")[[1]][2]
alg <- strsplit(filename, "\.")[[1]][2]
strsplit(filename, ".")[[1]]
strsplit(filename, "/.")[[1]]
strsplit(filename, "[.]")[[1]]
alg <- strsplit(filename, "[.]")[[1]][2]
results <- data.frame()
for(i in 1:100) {
raw <- fromJSON(strsplit(raw_txt[i], "INFO")[[1]][2])
results <- rbind(results, data.frame(algorithm=alg, epochs=raw$epochs, test_accuracy=raw$test_accuracy))
}
results
init <- strsplit(filename, "[.]")[[1]][3]
results <- data.frame()
for(i in 1:100) {
raw <- fromJSON(strsplit(raw_txt[i], "INFO")[[1]][2])
results <- rbind(results, data.frame(algorithm=alg, init=init, epochs=raw$epochs, test_accuracy=raw$test_accuracy))
}
results
readSummaryLog <- function(filename) {
raw_txt <- readLines(filename)
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
results <- data.frame()
for(i in 1:100) {
raw <- fromJSON(strsplit(raw_txt[i], "INFO")[[1]][2])
results <- rbind(results, data.frame(algorithm=alg, init=init, epochs=raw$epochs, test_accuracy=raw$test_accuracy))
}
return(results)
}
results <- data.frame()
results <- rbind(results, readSummaryLog("summary.GA.rand.36.log"))
results <- data.frame()
results <- rbind(results, readSummaryLog("summary.GA.rand.36.log"))
results <- rbind(results, readSummaryLog("summary.GA.rand.108.log"))
results <- rbind(results, readSummaryLog("summary.EA.rand.36.log"))
results <- rbind(results, readSummaryLog("summary.EA.rand.108.log"))
results <- rbind(results, readSummaryLog("summary.GA.centroids.36.log"))
results <- rbind(results, readSummaryLog("summary.GA.centroids.108.log"))
results <- rbind(results, readSummaryLog("summary.EA.centroids.36.log"))
results <- rbind(results, readSummaryLog("summary.EA.centroids.108.log"))
p <- ggplot(results, aes(x=algorithm, y=test_accuracy, fill=epochs)) + geom_boxplot()
p <- p + scale_y_log10()
p <- p + theme_bw()
p <- p + ylab("Optimality gap") + xlab("Method")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy, fill=epochs)) + geom_boxplot()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=epochs))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
?geom_boxplot
results
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init, group=epochs))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
head(results)
as.factor(results$epochs)
results$epochs <- as.factor(results$epochs)
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init, group=epochs))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
results
head(results)
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(group=init))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
as.factor(results$init)
results$init <- as.factor(results$init)
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(group=init))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(group=epochs))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=epochs))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=epochs, group=init))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw()
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw() + facet_wrap(epochs, nrow=5)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw() + facet_wrap(~epochs, nrow=5)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw() + facet_wrap(~epochs, nrow=1)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
filename <- "log.GA.rand.36.log"
raw_txt <- readLines(filename)
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
raw_txt <- read.csv(filename, sep="\t")
head(raw_txt)
raw_txt <- read.csv(filename, sep="\t", header=FALSE)
is.data.frame(raw_txt)
raw_log <- read.csv(filename, sep="\t", header=FALSE)
raw_log$alg <- alg
raw_log$algorithm <- alg
raw_log$init <- init
filename <- "log.GA.rand.36.log"
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
raw_log <- read.csv(filename, sep="\t", header=FALSE)
raw_log$algorithm <- alg
raw_log$init <- init
rep(1, 10)
sapply(1:100, function(x) rep(x, 104))
unlist(sapply(1:100, function(x) rep(x, 104)))
unlist(sapply(1:100, function(x){ rep(x, 104)}))
lapply(1:100, function(x){ rep(x, 104)})
lapply(1:10, function(x){ rep(x, 11)})
sapply(1:10, function(x){ rep(x, 11)})
lapply(1:10, function(x){ rep(x, 11)})
unlist(lapply(1:10, function(x){ rep(x, 11)}))
unlist(lapply(1:100, function(x){ rep(x, 104)}))
raw_log$seed <- unlist(lapply(1:100, function(x){ rep(x, 104)}))
raw_log$seed <- unlist(lapply(1:100, function(x){ rep(x, 105)}))
head(raw_log)
raw_log <- read.csv(filename, sep="\t", header=FALSE)
colnames(raw_log) <- c("ngen", "evals", "mean", "std", "min", "max")
raw_log$algorithm <- alg
raw_log$init <- init
raw_log$seed <- unlist(lapply(1:100, function(x){ rep(x, 105)}))
head(raw_log)
readGenLog <- function(filename) {
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
raw_log <- read.csv(filename, sep="\t", header=FALSE)
colnames(raw_log) <- c("ngen", "evals", "mean", "std", "min", "max")
raw_log$algorithm <- alg
raw_log$init <- init
raw_log$seed <- unlist(lapply(1:100, function(x){ rep(x, 105)}))
return(raw_log)
}
log <- data.frame()
log <- rbind(log, readGenLog("log.GA.rand.36.log"))
readGenLog <- function(filename) {
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
raw_log <- read.csv(filename, sep="\t", header=FALSE)
colnames(raw_log) <- c("ngen", "evals", "mean", "std", "min", "max")
raw_log$algorithm <- alg
raw_log$init <- init
raw_log$seed <- unlist(lapply(1:100, function(x){ rep(x, 105)}))
return(raw_log)
}
log <- data.frame()
log <- rbind(log, readGenLog("log.GA.rand.36.log"))
log <- rbind(log, readGenLog("log.GA.rand.108.log"))
log <- rbind(log, readGenLog("log.EA.rand.36.log"))
log <- rbind(log, readGenLog("log.EA.rand.108.log"))
log <- rbind(log, readGenLog("log.GA.centroids.36.log"))
log <- rbind(log, readGenLog("log.GA.centroids.108.log"))
log <- rbind(log, readGenLog("log.EA.centroids.36.log"))
log <- rbind(log, readGenLog("log.EA.centroids.108.log"))
p <- ggplot(log, aes(x=ngen, y=mean)) + geom_line(aes(group=algorithm))
p
p <- ggplot(log[which(log$seed==1)], aes(x=ngen, y=mean)) + geom_line(aes(group=algorithm))
p <- ggplot(log[which(log$seed==1),], aes(x=ngen, y=mean)) + geom_line(aes(group=algorithm))
p
p <- ggplot(log[which(log$seed==1),], aes(x=ngen, y=mean)) + geom_line(aes(fill=algorithm))
p
p <- ggplot(log[which(log$seed==1),], aes(x=ngen, y=mean)) + geom_line(aes(color=algorithm))
p
meanLog <- data.frame()
log[which(log$ngen==1)]
log[which(log$ngen==1),]
alg <- "GA"
log[which(log$ngen==1 & log$algorithm==alg),]
i <- 1
init <- "rand"
log[which(log$ngen==i & log$algorithm==alg & log$init==init),]
min(log$ngen)
epochs <- 36
log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs),]
readGenLog <- function(filename) {
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
epochs <- strsplit(filename, "[.]")[[1]][4]
raw_log <- read.csv(filename, sep="\t", header=FALSE)
colnames(raw_log) <- c("ngen", "evals", "mean", "std", "min", "max")
raw_log$algorithm <- alg
raw_log$init <- init
raw_log$epochs <- epochs
raw_log$seed <- unlist(lapply(1:100, function(x){ rep(x, 105)}))
return(raw_log)
}
log <- data.frame()
log <- rbind(log, readGenLog("log.GA.rand.36.log"))
log <- rbind(log, readGenLog("log.GA.rand.108.log"))
log <- rbind(log, readGenLog("log.EA.rand.36.log"))
log <- rbind(log, readGenLog("log.EA.rand.108.log"))
log <- rbind(log, readGenLog("log.GA.centroids.36.log"))
log <- rbind(log, readGenLog("log.GA.centroids.108.log"))
log <- rbind(log, readGenLog("log.EA.centroids.36.log"))
log <- rbind(log, readGenLog("log.EA.centroids.108.log"))
head(log)
log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs),]
log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs), c("mean")]
for(i in 0:104) {
tmp <- log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs), c("mean")]
meanLog <- rbind(meanLog, data.frame(algorithm=alg, init=init, epochs=epochs, ngen=i, mean=mean(tmp), std=sd(tmp)) )
}
meanLog
tmp <- log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs), c("mean", "max")]
tmp
meanLog <- data.frame()
for(i in 0:104) {
tmp <- log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs), c("mean", "max")]
meanLog <- rbind(meanLog, data.frame(algorithm=alg, init=init, epochs=epochs, ngen=i, mean=mean(tmp$mean), std=sd(tmp$mean), max=mean(tmp$max), stdmax=sd(tmp$max)) )
}
meanLog
meanLog <- data.frame()
for(alg in c("GA", "EA")) {
for(epochs in c(36, 108) {
for(i in 0:104) {
tmp <- log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs), c("mean", "max")]
meanLog <- rbind(meanLog, data.frame(algorithm=alg, init=init, epochs=epochs, ngen=i, mean=mean(tmp$mean), std=sd(tmp$mean), max=mean(tmp$max), stdmax=sd(tmp$max)) )
}
}
}
}
p <- ggplot(log[which(log$seed==1),], aes(x=ngen, y=mean)) + geom_line(aes(color=algorithm))
p
meanLog <- data.frame()
for(alg in c("GA", "EA")) {
for(init in c("rand", "centroids")) {
for(epochs in c(36, 108)) {
for(i in 0:104) {
tmp <- log[which(log$ngen==i & log$algorithm==alg & log$init==init & log$epochs==epochs), c("mean", "max")]
meanLog <- rbind(meanLog, data.frame(algorithm=alg, init=init, epochs=epochs, ngen=i, mean=mean(tmp$mean), std=sd(tmp$mean), max=mean(tmp$max), stdmax=sd(tmp$max)) )
}
}
}
}
head(meanLog)
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=algorithm, group=epochs))
p
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=algorithm, group=epochs))
p <- p + theme_bw() + facet_wrap(~epochs, nrow=1)
p
?geom_line
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=init, group=algorithm))
p <- p + theme_bw() + facet_wrap(~epochs, nrow=1)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~algorithm + epochs, nrow=1)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~algorithm + epochs, nrow=2)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~algorithm + epochs, nrow=2)
p <- p + ylab("Mean population validation accuracy") + xlab("Generation")
p
p <- ggplot(meanLog, aes(x=ngen, y=max)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~algorithm + epochs, nrow=2)
p <- p + ylab("Mean population validation accuracy") + xlab("Generation")
p
p <- ggplot(meanLog, aes(x=ngen, y=max)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~epochs + algorithm, nrow=2)
p <- p + ylab("Mean max population validation accuracy") + xlab("Generation")
p
p <- ggplot(meanLog, aes(x=ngen, y=mean)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~epochs + algorithm, nrow=2)
p <- p + ylab("Mean population validation accuracy") + xlab("Generation")
p
p <- ggplot(meanLog, aes(x=ngen, y=max)) + geom_line(aes(color=init))
p <- p + theme_bw() + facet_wrap(~epochs + algorithm, nrow=2)
p <- p + ylab("Mean max population validation accuracy") + xlab("Generation")
p
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw() + facet_wrap(~epochs, nrow=1)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
readSummaryLog <- function(filename) {
raw_txt <- readLines(filename)
alg <- strsplit(filename, "[.]")[[1]][2]
init <- strsplit(filename, "[.]")[[1]][3]
results <- data.frame()
for(i in 1:100) {
raw <- fromJSON(strsplit(raw_txt[i], "INFO")[[1]][2])
results <- rbind(results, data.frame(algorithm=alg, init=init, epochs=raw$epochs, test_accuracy=raw$test_accuracy))
}
return(results)
}
results <- data.frame()
results <- rbind(results, readSummaryLog("summary.GA.rand.36.log"))
results <- rbind(results, readSummaryLog("summary.GA.rand.108.log"))
results <- rbind(results, readSummaryLog("summary.EA.rand.36.log"))
results <- rbind(results, readSummaryLog("summary.EA.rand.108.log"))
results <- rbind(results, readSummaryLog("summary.GA.centroids.36.log"))
results <- rbind(results, readSummaryLog("summary.GA.centroids.108.log"))
results <- rbind(results, readSummaryLog("summary.EA.centroids.36.log"))
results <- rbind(results, readSummaryLog("summary.EA.centroids.108.log"))
results$epochs <- as.factor(results$epochs)
results$init <- as.factor(results$init)
p <- ggplot(results, aes(x=algorithm, y=test_accuracy)) + geom_boxplot(aes(fill=init))
p <- p + theme_bw() + facet_wrap(~epochs, nrow=1)
p <- p + ylab("Test accuracy") + xlab("Algorithm")
p
results[which(results$algorithm=="GA" & results$epochs==36),]
results[which(results$algorithm=="GA" & results$epochs==36 & results$init=="rand"),]
results[which(results$algorithm=="GA" & results$epochs==36 & results$init=="rand"), c("test_accuracy")]
wilcox.test(
results[which(results$algorithm=="GA" & results$epochs==36 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="GA" & results$epochs==36 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="GA" & results$epochs==108 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="GA" & results$epochs==108 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="EA" & results$epochs==36 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="EA" & results$epochs==36 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="EA" & results$epochs==108 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="EA" & results$epochs==108 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="GA" & results$epochs==36 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="GA" & results$epochs==36 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="GA" & results$epochs==108 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="GA" & results$epochs==108 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="EA" & results$epochs==36 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="EA" & results$epochs==36 & results$init=="centroids"), c("test_accuracy")])
wilcox.test(
results[which(results$algorithm=="EA" & results$epochs==108 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="EA" & results$epochs==108 & results$init=="centroids"), c("test_accuracy")])
?wilcox.test
wilcox.test(runif(1000), runif(1000))
wilcox.test(runif(1000), runif(1000))
wilcox.test(runif(1000), runif(1000))
wilcox.test(runif(1000), runif(1000, 10,20))
wilcox.test(
results[which(results$algorithm=="EA" & results$epochs==108 & results$init=="rand"), c("test_accuracy")],
results[which(results$algorithm=="EA" & results$epochs==108 & results$init=="centroids"), c("test_accuracy")])
